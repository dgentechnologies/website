/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for a simple blog.
 *
 * Core Philosophy:
 * The blog posts are publicly readable, but only authenticated users can create, update, or delete them.
 * No specific ownership is enforced. Any authenticated user can modify any blog post.
 *
 * Data Structure:
 * The data consists of a single top-level collection: `/blogPosts/{postId}`.
 *
 * Key Security Decisions:
 * - Public Read: Blog posts are freely accessible for reading (get, list).
 * - Authenticated Write: Creating, updating, and deleting blog posts requires authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls read and write access to individual blog post documents.
     * @path /blogPosts/{postId}
     * @allow (get, list): Any user can read blog posts.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete blog posts.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete blog posts.
     * @principle Allows public reads but restricts writes to authenticated users.
     */
    match /blogPosts/{postId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    // Helper function to check if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}