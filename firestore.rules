/**
 * @fileoverview Firestore Security Rules for the blogPosts collection.
 *
 * Core Philosophy:
 * This ruleset allows public read access to all blog posts, but restricts write access to authenticated users.
 *
 * Data Structure:
 * The data is stored in a top-level collection called `/blogPosts/{postId}`.  Each document represents a blog post.
 *
 * Key Security Decisions:
 * - Allows unauthenticated read access (get, list) to the `blogPosts` collection.
 * - Requires authentication for all write operations (create, update, delete).
 * - Assumes that authentication is sufficient for write access and that any authenticated user is permitted to write.
 *   THIS IS FOR PROTOTYPING ONLY and MUST be refined with real role-based authorization in a production app.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to individual blog post documents.
     * @path /blogPosts/{postId}
     * @allow (get, list): Any user can read blog posts.
     * @allow (create, update, delete): Any authenticated user can create, update, or delete blog posts.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete blog posts.
     * @principle Allows public read access but restricts write access to authenticated users.
     */
    match /blogPosts/{postId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    // Helper function to check if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}